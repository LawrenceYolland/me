{"version":3,"sources":["assets/images/headshot.jpg","components/Home/HomeCard.js","components/Home/SocialBar.js","components/Home/Home.js","components/Research/Research.js","components/DayNight.js","actions/mode.js","actions/types.js","App.js","serviceWorker.js","reducers/daynight.js","reducers/index.js","store.js","index.js"],"names":["module","exports","connect","state","mode","screenMode","className","src","require","alt","to","screeMode","href","class","title","Home","Component","Research","DayNight","setMode","this","props","type","onClick","dispatch","App","exact","path","render","Boolean","window","location","hostname","match","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,sC,4LCuC5BC,G,YAAAA,aANS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAMC,KAAKA,QAMnB,KAFaF,EAlCE,SAAC,GAAc,IACxBG,EADuB,EAAXD,KACQ,OAAS,QACnC,OACE,yBAAKE,UAAU,kBACb,yBAAKA,UAAU,wBACb,yBAAKC,IAAKC,EAAQ,IAAqCC,IAAI,cAI7D,mDACA,qHAIA,2DAEE,kBAAC,IAAD,CAAMC,GAAG,YAAYJ,UAAW,aAAoBD,GAApD,QAFF,2CAME,kBAAC,IAAD,CAAMK,GAAG,IAAIJ,UAAW,aAAoBD,GAA5C,cC0BOH,G,MAAAA,aANS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAMC,KAAKA,QAMnB,KAFaF,EA/CG,SAAC,GAAc,IACzBS,EADwB,EAAXP,KACM,OAAS,QAElC,OACE,yBAAKE,UAAU,4BACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,eACb,uBACEM,KAAK,sCACLC,MAAO,uBAA8BF,EACrCG,MAAM,0BAGV,yBAAKR,UAAU,eACb,uBACEM,KAAK,qCACLC,MAAO,sBAA6BF,EACpCG,MAAM,yBAGV,yBAAKR,UAAU,eACb,uBACEM,KAAK,+CACLC,MAAO,wBAA+BF,EACtCG,MAAM,wBAGV,yBAAKR,UAAU,eACb,uBACEM,KAAK,qCACLC,MAAO,wBAA+BF,EACtCG,MAAM,6BChCCC,E,iLAEjB,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAL0BC,aCFbC,E,iLAEjB,OAAO,kBAAC,WAAD,e,GAF2BD,aCKhCE,G,uLAKM,IACAC,EAAYC,KAAKC,MAAjBF,QACR,OACE,yBAAKb,UAAU,wBACb,2BAAOO,MAAM,mBACX,2BAAOS,KAAK,WAAWC,QAASJ,IAChC,0BAAMN,MAAM,gC,GAXCG,cAkBRd,cACb,KACA,CAAEiB,QCzBmB,kBAAM,SAAAK,GAC3BA,EAAS,CACPF,KCJoB,gBFyBTpB,CAGbgB,GGnBIO,E,iLAEF,IAAMpB,EAAae,KAAKC,MAAMjB,KAAO,OAAS,QAC9C,OACE,yBAAKE,UAAW,OAAcD,GAC5B,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,SACpC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,YAAYC,OAAQ,kBAAM,kBAAC,EAAD,e,GARpCZ,aAqBHd,eANS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAMC,KAAKA,QAMnB,KAFaF,CAGbuB,GCrBkBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BChBAC,EAAe,CACnB9B,MAAM,GCAO+B,4BAAgB,CAC7B/B,KDEa,WAAmC,IAAlCD,EAAiC,uDAAzB+B,EAAcE,EAAW,uCAC/C,OAAQA,EAAOd,MACb,IHRoB,WGSlB,MAAO,CACLlB,MAAOD,EAAMC,MAEjB,QACE,OAAOD,MEPPkC,EAAa,CAACC,KAQLC,EANDC,sBACZC,EAJmB,GAMnBC,8BAAoBC,kBAAe,WAAf,EAAmBN,KCAzCO,IAAShB,OACP,kBAAC,IAAD,CAAUW,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJM,SAASC,eAAe,SJgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.81cdbdea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headshot.c609fb8e.jpg\";","import React, { Component } from \"react\";\nimport \"../../assets/styles/HomeCard.css\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nconst HomeCard = ({ mode }) => {\n  const screenMode = mode ? \"Dark\" : \"Light\";\n  return (\n    <div className=\"home-container\">\n      <div className=\"home-image-container\">\n        <img src={require(\"../../assets/images/headshot.jpg\")} alt=\"headshot\" />\n\n        {/* <img src={require(\"../assets/images/headshot.jpg\")} alt=\"headshot\" /> */}\n      </div>\n      <h1>Dr Lawrence Yolland</h1>\n      <p>\n        Hellooooo - I'm Lawrence, a former computational biologist turned\n        full-stack developer\n      </p>\n      <p>\n        You can check out my research\n        <Link to=\"/research\" className={\"text-link\" + \" \" + screenMode}>\n          here\n        </Link>\n        and some of the things I've things built\n        <Link to=\"/\" className={\"text-link\" + \" \" + screenMode}>\n          here\n        </Link>\n      </p>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    mode: state.mode.mode\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(HomeCard);\n","import React from \"react\";\nimport \"../../assets/styles/SocialBar.css\";\nimport { connect } from \"react-redux\";\n\nconst SocialBar = ({ mode }) => {\n  const screeMode = mode ? \"Dark\" : \"Light\";\n\n  return (\n    <div className=\"social-content-container\">\n      <div className=\"social-bar\">\n        <div className=\"social-icon-container\">\n          <div className=\"social-icon\">\n            <a\n              href=\"https://twitter.com/lawrenceyolland\"\n              class={\"fa fa-twitter fa-2x\" + \" \" + screeMode}\n              title=\"follow me on Twitter\"\n            ></a>\n          </div>\n          <div className=\"social-icon\">\n            <a\n              href=\"https://github.com/lawrenceyolland\"\n              class={\"fa fa-github fa-2x\" + \" \" + screeMode}\n              title=\"check out my Github\"\n            ></a>\n          </div>\n          <div className=\"social-icon\">\n            <a\n              href=\"https://www.linkedin.com/in/lawrenceyolland/\"\n              class={\"fa fa-linkedin fa-2x\" + \" \" + screeMode}\n              title=\"add me on LinkedIn\"\n            ></a>\n          </div>\n          <div className=\"social-icon\">\n            <a\n              href=\"mailto:lawrence@sciencedisrupt.com\"\n              class={\"fa fa-envelope fa-2x\" + \" \" + screeMode}\n              title=\"send me an email\"\n            ></a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    mode: state.mode.mode\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(SocialBar);\n","import React, { Component, Fragment } from \"react\";\nimport HomeCard from \"./HomeCard\";\nimport SocialBar from \"./SocialBar\";\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <Fragment>\n        <HomeCard />\n        <SocialBar />\n      </Fragment>\n    );\n  }\n}\n","import React, { Component, Fragment } from \"react\";\n\nexport default class Research extends Component {\n  render() {\n    return <Fragment>hi</Fragment>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport PropTypes from \"prop-types\";\nimport { setMode } from \"../actions/mode\";\nimport \"../assets/styles/DayNight.css\";\n\nclass DayNight extends Component {\n  static propTypes = {\n    setMode: PropTypes.func.isRequired\n  };\n\n  render() {\n    const { setMode } = this.props;\n    return (\n      <div className=\"modeswitch-container\">\n        <label class=\"daynight-switch\">\n          <input type=\"checkbox\" onClick={setMode} />\n          <span class=\"daynight-slider round\"></span>\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { setMode }\n)(DayNight);\n","import { SET_MODE } from \"./types\";\n\nexport const setMode = () => dispatch => {\n  dispatch({\n    type: SET_MODE\n  });\n};\n","export const SET_MODE = \"SET_MODE\"","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./components/Home/Home\";\nimport Research from \"./components/Research/Research\";\n\nimport DayNight from \"./components/DayNight\";\n\nclass App extends Component {\n  render() {\n    const screenMode = this.props.mode ? \"Dark\" : \"Light\";\n    return (\n      <div className={\"App\" + \" \" + screenMode}>\n        <DayNight />\n        <Switch>\n          <Route exact path=\"/\" render={() => <Home />}></Route>\n          <Route exact path=\"/research\" render={() => <Research />}></Route>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    mode: state.mode.mode\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_MODE } from \"../actions/types\";\n\nconst initialState = {\n  mode: false\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_MODE:\n      return {\n        mode: !state.mode\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport mode from \"./daynight\";\n\nexport default combineReducers({\n  mode\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}